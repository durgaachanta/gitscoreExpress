{"version":3,"sources":["components/Gitinput.js","components/Gitscore.js","components/GitPrevSearch.js","components/GitBoard.js","App.js","serviceWorker.js","index.js"],"names":["Gitinput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","name","value","submitData","preventDefault","fetchUsername","state","input","react_default","a","createElement","id","onSubmit","type","onChange","className","disabled","React","Component","GitScore","keys","score","length","message","style","color","GitPrevSearch","prevData","map","item","index","GitBoard","data","url","concat","axios","get","then","response","gitScore","followers","public_repos","catch","error","prevSearch","_this2","console","log","components_Gitinput","Gitscore","components_GitPrevSearch","App","components_GitBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9eb1e7c.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/gitinput.css';\n\nclass Gitinput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n\n    };\n\n  };\n\n  handleChange = (e) => {\n\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  submitData = (e) => {\n    e.preventDefault();\n    this.props.fetchUsername(this.state.input);\n    this.setState({ input: '' });\n  }\n\n  render() {\n    return (\n      <div id=\"inputbox\" >\n        <form id=\"username\" onSubmit={this.submitData}>\n          <label id=\"userlabel\">Github Username:</label>\n          <input id=\"userinputbox\" name=\"input\" type=\"text\" onChange={this.handleChange} value={this.state.input} />\n          <button className=\"btn\" type=\"submit\" disabled={this.state.input ? false : true}>Calculate my Github Score</button>\n        </form>\n      </div>\n\n    );\n  }\n\n}\n\nexport default Gitinput;","import React from 'react';\nimport '../styles/gitscore.css';\n\nconst GitScore = (props) => {\n  const differentMessage = () => {\n    if (props.score.score >= 200) {\n      return <h3 style={{ \"color\": \"blue\" }}> Github Elite!</h3 >\n    } else if (props.score.score < 20) {\n      return <h3 style={{ \"color\": \"red\" }}>Needs Work!</h3>\n    } else if (props.score.score > 20 && props.score.score < 50) {\n      return <h3 style={{ \"color\": \"orange\" }}>A decent start!</h3>\n    } else if (props.score.score > 50 && props.score.score < 100) {\n      return <h3 style={{ \"color\": \"black\" }}>Doing good!</h3>\n    } else if (props.score.score > 100 && props.score.score < 200) {\n      return <h3 style={{ \"color\": \"green\" }}>Great job!</h3>\n    }\n\n  };\n\n  return (\n    Object.keys(props.score).length !== 0 ? (\n      <div id=\"gitscore\">\n        {props.score.message === \"Success\" ?\n          (\n            <div>\n              <h1>\n                Your Score: {props.score.score}\n              </h1>\n              {differentMessage()}\n            </div>\n          ) : (\n            <h1>\n              {props.score.score}\n            </h1>\n          )\n        }\n\n      </div>\n    ) : ''\n\n  );\n}\nexport default GitScore;","import React from 'react';\nconst GitPrevSearch = (props) => {\n  return (\n    <div>\n      <h1>Previous Search Results</h1>\n      {props.prevData.map((item, index) => {\n        return (\n          <div>\n            <label>Name: {item.name}</label>\n            <label>Score: {item.score}</label>\n          </div>\n        )\n      })}\n    </div>\n\n  );\n}\nexport default GitPrevSearch;","import React from 'react';\nimport axios from 'axios';\nimport Gitinput from './Gitinput';\nimport Gitscore from './Gitscore';\nimport GitPrevSearch from './GitPrevSearch';\nimport '../styles/gitBoard.css';\n\nclass GitBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gitScore: {},\n      prevSearch: [],\n    };\n\n  };\n  componentDidMount() {\n    console.log(\"On initial load of the screen\");\n    // make a get call to express server\n    axios.get('/getusers')\n      .then((response) => {\n        console.log(response);\n        this.setState({ prevSearch: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n\n  }\n\n  fetchUsername = (data) => {\n    // for Express - instead of calling git hub directly - call the express server\n    //var url = `https://api.github.com/users/${data}`;\n    var url = `/users/${data}`;\n    axios.get(url)\n      .then((response) => {\n        var score = response.data.followers + response.data.public_repos;\n        var message = \"Success\";\n        var gitScore = {\n          score: score,\n          message: message,\n        }\n        this.setState({ gitScore });\n      })\n      .catch((error) => {\n        var score = \"User does not exist, pick a different Github username\";\n        var message = \"failure\";\n        var gitScore = {\n          score: score,\n          message: message,\n        }\n        this.setState({ gitScore });\n      })\n\n  }\n\n  render() {\n    return (\n      <div id=\"gitboard\">\n        <h1 id=\"header\">GitHub Score</h1>\n        <Gitinput fetchUsername={this.fetchUsername} />\n        <Gitscore score={this.state.gitScore} />\n        <GitPrevSearch prevData={this.state.prevSearch} />\n      </div>\n\n    );\n\n  }\n\n}\nexport default GitBoard;","import React, { Component } from 'react';\nimport GitBoard from './components/GitBoard';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <GitBoard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}